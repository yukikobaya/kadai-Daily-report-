@CHARSET "UTF-8";
/*
YUI 3.18.1 (build f7e7bcb)
Copyright 2014 Yahoo! Inc. All rights reserved.
Licensed under the BSD License.
http://yuilibrary.com/license/
*/

html{color:#000;background:#FFF}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0}table{border-collapse:collapse;border-spacing:0}fieldset,img{border:0}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:normal}ol,ul{list-style:none}caption,th{text-align:left}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:normal}q:before,q:after{content:''}abbr,acronym{border:0;font-variant:normal}sup{vertical-align:text-top}sub{vertical-align:text-bottom}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit;*font-size:100%}legend{color:#000}#yui3-css-stamp.cssreset{display:none}
WebContent/css/style.css

@CHARSET "UTF-8";

body {
    color: #333333;
    font-family: "Hiragino Kaku Gothic Pro",Meiryo,"MS PGothic",Helvetica,Arial,sans-serif;
}

#header {
    width: 100%;
    height: 70px;
    background-color: #333333;
}

#content {
    width: 94%;
    margin-top: 15px;
    padding-left: 3%;
}

h1 {
    width: 94%;
    padding-top: 17px;
    padding-left: 3%;
    font-size: 24px;
    color: #eeeeee;
}

h2 {
    font-size: 36px;
    margin-bottom: 15px;
}

li {
    margin-top: 10px;
    margin-bottom: 10px;
}

p {
    margin-top: 15px;
    margin-bottom: 15px;
}

a {
    text-decoration: none;
    color: #24738e;
}

table, tr, th, td {
    border: 1px solid #cccccc;
}

table {
    width: 100%;
    table-layout: fixed;
}

th {
    width: 26%;
    padding: 10px 2%;
}

td {
    width: 66%;
    padding: 10px 2%;
}

button {
    font-size: 14px;
    padding: 5px 10px;
}

#footer {
    text-align: center;
}
reset.css はCSSの調整をしやすくするためのもので、style.css はメッセージボード独自のCSS指定をするためのファイルになります。

また、show.jsp でのタイトルとメッセージ、作成日時および変更日時の表示をテーブルでの表示に変更してみましょう。

WebContent/WEB-INF/views/messages/show.jsp（該当部分のみ抜粋）

                <!-- ...（中略）... -->

                <h2>id : ${message.id} のメッセージ詳細ページ</h2>

                <table>
                    <tbody>
                        <tr>
                            <th>タイトル</th>
                            <td><c:out value="${message.title}" /></td>
                        </tr>
                        <tr>
                            <th>メッセージ</th>
                            <td><c:out value="${message.content}" /></td>
                        </tr>
                        <tr>
                            <th>作成日時</th>
                            <td><fmt:formatDate value="${message.created_at}" pattern="yyyy-MM-dd HH:mm:ss" /></td>
                        </tr>
                        <tr>
                            <th>更新日時</th>
                            <td><fmt:formatDate value="${message.updated_at}" pattern="yyyy-MM-dd HH:mm:ss" /></td>
                        </tr>
                    </tbody>
                </table>

                <p><a href="${pageContext.request.contextPath}/index">一覧に戻る</a></p>

                <!-- ...（中略）... -->
これだけでも充分、見た目が変わります！

00_01

00_02

00_03

もっと色々な見た目に変えたい場合は、Webデザインを学ぶ、デザイナーさんに依頼する、もしくは Bootstrap のようなWebデザイン系のフレームワークを適用する必要があります。

ブラウザの強制リロード
一度作成したCSSを変更した場合、動作確認の際に変更が反映されず、レイアウトが崩れたりすることがあります。
これは、ブラウザで画面表示を高速に行うために「キャッシュ」という仕組みがあり、一度実行（読み込んだ）したCSSがキャッシュに残ってしまうためです。
このような場合、ブラウザが保存している内容（キャッシュ）を無視して、すべてのデータを再読み込みさせる強制リロードを行うことで、CSSなどの変更を実行結果に反映させることができます。
なお、この操作方法はOSやブラウザによって異なるため、注意が必要です。
OS  ブラウザ    強制リロード
Mac Google Chrome   ⌘ キー +shift キー + R キー
Safari  shift キー + 更新ボタン
eclipse内蔵ブラウザ   control キー + 更新ボタン
Firefox ⌘ キー +shift キー + R キー
Windows Google Chrome   shift キー + F5 キー
ctrl キー + F5 キー
ctrl キー + 更新ボタン
shift キー + 更新ボタン
Microsoft Edge
eclipse内蔵ブラウザ   ctrl キー + F5 キー
ctrl キー + 更新ボタン
Firefox ctrl キー + F5 キー
ctrl キー + shift キー + R キー
shift キー + 再読み込みボタン
Gitにコミットする
ここまでの内容をGitにコミットしましょう。

$ git add .
$ git commit -m "Add stylesheets"
Lesson 13Chapter 15.3
フラッシュメッセージを出す
create、update、destroy したときに「登録が完了しました」のような文言を表示した方が親切です。こういった文言表示を フラッシュメッセージ といいます。ここまでのアプリケーションでは未実装ですので、機能追加しましょう。

まずは、その文言を表示する場所を、リダイレクト先の index とし、index.jsp の「メッセージ一覧」と書かれた場所の上に、以下の <c:if> タグを追記します。

WebContent/WEB-INF/views/messages/index.jsp（該当部分のみ抜粋）

    <!-- ...（中略）... -->

    <c:param name="content">
        <c:if test="${flush != null}">
            <div id="flush_success">
                <c:out value="${flush}"></c:out>
            </div>
        </c:if>
        <h2>メッセージ一覧</h2>

    <!-- ...（中略）... -->
/create、/update、/destroy の各サーブレットで、データベースに対する処理が完了したときにフラッシュメッセージをセットします。しかし、そこから /index へリダイレクトし、さらに index.jsp を呼び出すという複数の遷移が発生するため、リクエストスコープにフラッシュメッセージをセットすると途中で削除されてしまいます。

そこで、フラッシュメッセージをセッションスコープに保存し、index.jsp を呼び出したときにセッションスコープから取り出して表示するようにします。

そこで、下記の3つのサーブレットそれぞれで、 em.getTransaction().commit(); のすぐ下に命令を追記してください。

src/controllers/CreateServlet.java（該当部分のみ抜粋）

            // ...（中略）...

            // データベースに保存
            em.getTransaction().begin();
            em.persist(m);
            em.getTransaction().commit();
            request.getSession().setAttribute("flush", "登録が完了しました。");       // ここを追記
            em.close();

            // ...（中略）...
src/controllers/UpdateServlet.java（該当部分のみ抜粋）

            // ...（中略）...

            // データベースを更新
            em.getTransaction().begin();
            em.getTransaction().commit();
            request.getSession().setAttribute("flush", "更新が完了しました。");       // ここを追記
            em.close();

            // ...（中略）...
src/controllers/DestroyServlet.java（該当部分のみ抜粋）

            // ...（中略）...

            em.getTransaction().begin();
            em.remove(m);       // データ削除
            em.getTransaction().commit();
            request.getSession().setAttribute("flush", "削除が完了しました。");       // ここを追記
            em.close();

            // ...（中略）...
ただし、セッションスコープに入れっぱなしだと、index にアクセスするたび表示されます。一度限りの表示とするため、IndexServlet でセッションスコープからリクエストスコープに移し替え、そのあとセッションスコープから除去してください。

問い合わせ結果をリクエストスコープにセットする行の下に、以下の内容を追記しましょう。

src/controllers/IndexServlet.java（該当部分のみ抜粋）

        // ...（中略）...

        request.setAttribute("messages", messages);

        // フラッシュメッセージがセッションスコープにセットされていたら
        if(request.getSession().getAttribute("flush") != null) {
            // セッションスコープ内のフラッシュメッセージをリクエストスコープに保存し、セッションスコープからは削除する
            request.setAttribute("flush", request.getSession().getAttribute("flush"));
            request.getSession().removeAttribute("flush");
        }

        // ...（中略）...
さらに、装飾した形でメッセージを表示したいので style.css の一番下に、下記の内容を追記してください。

WebContent/css/style.css（追記する内容のみ）

#flush_success {
    width: 100%;
    padding-top: 28px;
    padding-left: 2%;
    padding-bottom: 28px;
    margin-bottom: 15px;
    color: #155724;
    background-color: #d4edda;
}
Tomcatを再起動して、登録、変更、削除を試してみましょう。index のページに戻ったとき、緑色の枠の中に「完了しました」と表示されればOKです。

12

Gitにコミットする
ここまでの内容をGitにコミットしましょう。

$ git add .
$ git commit -m "Add flush message"
Lesson 13Chapter 15.4
indexの表示件数を減らす（ページネーション）
メッセージの投稿件数が増えてくると index ページの一覧が非常に長くなって見づらくなります。そこで、1ページに15件のみ表示して、「次のページへ進む」「前のページへ戻る」リンクを追加しましょう。このような機能を ページネーション といいます。

 ページネーションが正常に動作するか確認できるように、メッセージを16件以上登録しておいてください。
ページネーションを使う上で、最初に作成した getAllMessages のJPQLはそのまま利用できますが、加えて「データベースにメッセージのデータが何件入っているか」を知るためのJPQLが必要になります。まずは、そのJPQLを用意しましょう。

Message クラスの @NamedQuery アノテーション部分を以下のように変更してください。getAllMessages の @NamedQuery で閉じ括弧の直後にカンマ (,) が入っていることに注意しましょう。

src/models/Message.java（該当部分のみ抜粋）

// ...（中略）...

@NamedQueries({
    @NamedQuery(
            name = "getAllMessages",
            query = "SELECT m FROM Message AS m ORDER BY m.id DESC"
            ),
    @NamedQuery(
            name = "getMessagesCount",
            query = "SELECT COUNT(m) FROM Message AS m"
            )
})

// ...（中略）...
さらに IndexServlet の以下の部分、

        List<Message> messages = em.createNamedQuery("getAllMessages", Message.class)
                                   .getResultList();

        em.close();

        request.setAttribute("messages", messages);
ここを次のように変更してください。

src/controllers/IndexServlet.java（該当部分のみ抜粋）

        // 開くページ数を取得（デフォルトは1ページ目）
        int page = 1;
        try {
            page = Integer.parseInt(request.getParameter("page"));
        } catch(NumberFormatException e) {}

        // 最大件数と開始位置を指定してメッセージを取得
        List<Message> messages = em.createNamedQuery("getAllMessages", Message.class)
                                   .setFirstResult(15 * (page - 1))
                                   .setMaxResults(15)
                                   .getResultList();

        // 全件数を取得
        long messages_count = (long)em.createNamedQuery("getMessagesCount", Long.class)
                                      .getSingleResult();

        em.close();

        request.setAttribute("messages", messages);
        request.setAttribute("messages_count", messages_count);     // 全件数
        request.setAttribute("page", page);                         // ページ数
page=2 とあっても request.getParameter() で取得できるのはString型の "2" です。そこで Integer.parseInt() で文字列から数値に変更しています。

ただ、page のパラメータが無かったり page=a のように数値ではないものが指定されるかもしれません。本来ならしっかりした形でパラメータが数値かどうか調べるべきですが、今回は、数値ではないものを Integer.parseInt に渡すと NumberFormatException という例外が表示されるという性質を使って、try と catch で囲って処理が止まらないようにしています。

データベースへ問い合わせている部分ですが、setFirstResult(15 * (page - 1)) は「何件目からデータを取得するか（配列と同じ0番目から数えていきます）」、setMaxResults(15) は「データの最大取得件数（今回は15件で固定）」を設定します。

また、getAllMessages は複数のデータが結果として戻ってくる可能性があるため getResultList() で問い合わせ結果を取得していますが、getMessagesCount は全件数という1つの結果のみが戻ってくるので、 getSingleResult() という “1件だけ取得する” という命令を指定しています。

最後にメッセージデータのリストの他、全件数の数値と表示するページ数の数値もリクエストスコープにセットして index.jsp に送っています。

サーブレット側の準備は以上です。最後に index.jsp で「新規メッセージの投稿」の上に、以下の<div> タグを追記してください。

WebContent/WEB-INF/views/messages/index.jsp

        <!-- ...（中略）... -->

        <div id="pagination">
            （全 ${messages_count} 件）<br />
            <c:forEach var="i" begin="1" end="${((messages_count - 1) / 15) + 1}" step="1">
                <c:choose>
                    <c:when test="${i == page}">
                        <c:out value="${i}" />&nbsp;
                    </c:when>
                    <c:otherwise>
                        <a href="${pageContext.request.contextPath}/index?page=${i}"><c:out value="${i}" /></a>&nbsp;
                    </c:otherwise>
                </c:choose>
            </c:forEach>
        </div>
        <p><a href="${pageContext.request.contextPath}/new">新規メッセージの投稿</a></p>

        <!-- ...（中略）... -->
以下のような内容が画面に表示されればOKです！

13

Gitにコミットする
ここまでの内容をGitにコミットしましょう。

$ git add .
$ git commit -m "Add pagination"
Lesson 13Chapter 15.5
入力内容のチェック（バリデーション）
Tipsの最後に、Lesson11 サーブレット/JSP の「15 実践：問い合わせフォームの作成」 でも作ったような入力値チェック（バリデーション）を実装しましょう。

バリデーションには、ブラウザ側に（JavaScriptで）実装する方法と、サーバ側に（Javaで）実装する方法があります。ブラウザ側の方が単純ですがJavaScriptを扱う必要が生じるので、サーバ側のバリデーションを作りましょう。

まずは models.validators パッケージを用意（models パッケージの中に validators パッケージを新規で追加）し、その中に MessageValidator という名前の通常クラス（メインメソッドは不要）を作り、以下の内容を記述してください。今回はタイトルとメッセージ内容の必須入力チェックのみにしています。

src/models/validators/MessageValidator.java

package models.validators;

import java.util.ArrayList;
import java.util.List;

import models.Message;

public class MessageValidator {
    // バリデーションを実行する
    public static List<String> validate(Message m) {
        List<String> errors = new ArrayList<String>();

        String title_error = validateTitle(m.getTitle());
        if(!title_error.equals("")) {
            errors.add(title_error);
        }

        String content_error = validateContent(m.getContent());
        if(!content_error.equals("")) {
            errors.add(content_error);
        }

        return errors;
    }

    // タイトルの必須入力チェック
    private static String validateTitle(String title) {
        if(title == null || title.equals("")) {
            return "タイトルを入力してください。";
        }

        return "";
    }

    // メッセージの必須入力チェック
    private static String validateContent(String content) {
        if(content == null || content.equals("")) {
            return "メッセージを入力してください。";
        }

        return "";
    }
}
これを利用し、create と update のそれぞれにバリデーションを実装します。MessageValidator を import した上で、タイトルやメッセージが空欄だった場合に処理を受け付けず、フォーム画面に表示を戻す処理を追加しましょう。

m.setUpdated_at が記述されている行より下の部分を、以下のように書き換えてください。（models.validators.MessageValidator と java.util.List、import javax.servlet.RequestDispatcher; のimportが必須になります。）

src/controllers/CreateServlet.java（該当部分のみ抜粋）

            // ...（中略）...

            m.setUpdated_at(currentTime);

            // バリデーションを実行してエラーがあったら新規登録のフォームに戻る
            List<String> errors = MessageValidator.validate(m);
            if(errors.size() > 0) {
                em.close();

                // フォームに初期値を設定、さらにエラーメッセージを送る
                request.setAttribute("_token", request.getSession().getId());
                request.setAttribute("message", m);
                request.setAttribute("errors", errors);

                RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/messages/new.jsp");
                rd.forward(request, response);
            } else {
                // データベースに保存
                em.getTransaction().begin();
                em.persist(m);
                em.getTransaction().commit();
                request.getSession().setAttribute("flush", "登録が完了しました。");
                em.close();

                // indexのページにリダイレクト
                response.sendRedirect(request.getContextPath() + "/index");
            }

            // ...（中略）...
src/controllers/UpdateServlet.java（該当部分のみ抜粋）

            m.setUpdated_at(currentTime);       // 更新日時のみ上書き

            // バリデーションを実行してエラーがあったら編集画面のフォームに戻る
            List<String> errors = MessageValidator.validate(m);
            if(errors.size() > 0) {
                em.close();

                // フォームに初期値を設定、さらにエラーメッセージを送る
                request.setAttribute("_token", request.getSession().getId());
                request.setAttribute("message", m);
                request.setAttribute("errors", errors);

                RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/messages/edit.jsp");
                rd.forward(request, response);
            } else {
                // データベースを更新
                em.getTransaction().begin();
                em.getTransaction().commit();
                request.getSession().setAttribute("flush", "更新が完了しました。");
                em.close();

                // セッションスコープ上の不要になったデータを削除
                request.getSession().removeAttribute("message_id");

                // indexページへリダイレクト
                response.sendRedirect(request.getContextPath() + "/index");
            }
これで、タイトルとメッセージが空であれば登録（更新）処理が実行されなくなります。あとは、フォーム画面が表示された際にエラー内容を表示するように変更を加えましょう。JSTLタグを利用しているため <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> の追加を忘れないようにしてください。

WebContent/WEB-INF/views/messages/_form.jsp（該当部分のみ抜粋）

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:if test="${errors != null}">
    <div id="flush_error">
        入力内容にエラーがあります。<br />
        <c:forEach var="error" items="${errors}">
            ・<c:out value="${error}" /><br />
        </c:forEach>

    </div>
</c:if>
<label for="title">タイトル</label>

<!-- ...（中略）... -->
そして、style.css で一番下に #flush_error の定義を加えてください。

WebContent/css/style.css（追記部分のみ記載）

#flush_error {
    width: 100%;
    padding-top: 28px;
    padding-left: 2%;
    padding-bottom: 28px;
    margin-bottom: 15px;
    color: #721c24;
    background-color: #f8d7da;
}
Tomcatを再起動して動作確認してみましょう。入力チェックにひっかかる場合、赤い字でエラー内容が表示されればOKです！

14

Gitにコミットする
ここまでの内容をGitにコミットしましょう。

$ git add .
$ git commit -m "Add validation"
ポイントの確認
ここまでの内容がどんな内容だったか、改めて振り返っておきましょう。
一度に網羅する必要はありません。まずは下記の項目を理解できていれば大丈夫です。

・セッションスコープを活用したフラッシュメッセージ内容を確認する
・ページネーション内容を確認する
Lesson 13Chapter 16
まとめ
Webアプリケーションではとにかく下記の流れを絶対に忘れないでください。この流れがWebアプリケーションの基本であり、出発点です。

ちなみにModelはControllerによって必要なものが取得され、Viewに流れて表示されます。ユーザのHTTPリクエストをRouterが解析し、リクエストに沿った適切なModelをユーザに表示するのがWebアプリケーションだと心得てください。

Java Webアプリケーションの処理の流れ

また、 Modelとデータベースの関係も忘れないようにしてください。 Modelはデータベースがないと保存ができません。データベースという器が用意されていることで、Modelのインスタンスをレコードとして保存することが可能となります。

このレッスンで教材としては一区切りです。わからないことがあれば、とにかくこのレッスン（もしくはさらに前のレッスン）を読み返して何度も復習をしてください。一度ですべてを把握できないので、何度も読み返してみましょう。

また、解決できそうにない疑問はメンターに質問してください。次からのレッスンは、ここでの知識を前提に話を進めるので、このレッスンを納得しないで先に進むと、自分が何をしているのかわからなくなります。

本来であれば、メッセージボードは7つもサーブレットを用意する必要がありません。新規メッセージを書くにしても、indexにフォームを設置したほうが便利です。しかし、今回はあえてRESTの設計に沿った（リソースフルな）形を採用して開発しました。なぜなら、リソースフルな形こそWeb上におけるModel操作の基本構成だからです。

今後は一部のルーティングがリソースフルにすべきでないと考えるようになるでしょう。ユーザの利便性を考えると、場合によっては、リソースフルな形を変更するべきです。ただし、今回のリソースフルな形が、Webアプリケーションの基本だと言うことは覚えておいてください。

課題タスク管理アプリケーションの作成
ここまでで、 Model・Controller・Viewをひととおり学び、一区切りできたので、課題に取り組んで全体を復習しておきましょう。

タスクを管理できるWebアプリケーションを作成して、最後にGitHubへ kadai-tasklist というリモートリポジトリを作成してプッシュしてください。
なお、ローカルリポジトリのブランチ名はmainに変更していますので、リモートリポジトリの登録とプッシュを行うことになります。

以下、必須の仕様について述べます。

eclipseで tasklist という名前の動的webプロジェクトを作成してください。
本アプリケーションは、tasks テーブルを利用します。tasksテーブルは、IDと作成日時、更新日時の他、content（タスクの内容）カラムで構成されます。
7つのコントローラ（サーブレット）をすべて実装してください。
ビューは、以下のものを作成してください。
index (タスク一覧）
show（詳細ページ）
new（作成ページ）
edit（編集ページ）
GitHubに kadai-tasklist でプッシュしてください。
エラーのない状態のものをGitHubにプッシュしてください。
初めからもう一度復習を
ここまでのレッスンで学習した内容のみでこの課題を完成できます。ただし集大成となるので、このレッスンを初めからもう一度復習することを推奨します。断片的に覚えてきた知識をまとめてから課題に取り組んでみましょう。

機能追加は合格後に行ってください
上記の「仕様」に書かれていない機能を追加する（例：カラムを増やす）といった任意の対応は、それに伴う不具合発生のリスクが高まるため、課題提出前の対応としてはオススメしません。動作確認をしてエラーになる場合は不合格とします。

ただし、合格した後であれば、任意で機能追加する自主学習を行っても問題ありません。

課題の提出を行うにはGitHubアカウントとの連携が必要です。GitHubと連携する
Lesson 13Chapter 17
（参考）HerokuでWebアプリケーションを公開する
注：以下の内容は、クレジットカードの登録が必要になるため、必須の作業ではありません。クレジットカードの用意ができない方や内容に興味をもてない方、時間に余裕のない方は、すべて飛ばして、次の「日報管理システムの構築」のレッスンへ進んでください。

Lesson 13Chapter 17.1
Herokuとは
Heroku（へロク）とは、PaaS(Platform as a Service)と呼ばれるサービスで、サーバコンピュータを提供してくれるサービスです。

Heroku
ここでは、Herokuが提供してくれるサーバに、メッセージボードを デプロイ（アップロード）して、 Webサービスとして一般に公開します。

Herokuで公開したアプリケーションには、 アプリケーション名.herokuapp.com のFQDN（ドメイン名）が割り当てられます。

デプロイとは
さきほど書いたデプロイとは、Webアプリケーションなどをアップロードして起動し、ユーザが利用可能な状態にすることです。

Lesson 13Chapter 17.2
Herokuの料金体系
Herokuの料金体系を確認しておきましょう。無料（Free）プランから課金プランまであります。

Pricing - Heroku
無料プランの機能制限
本レッスンでは、無料プランで進めます。

無料プランではいくつか機能制限があります。

アカウント毎に、アプリケーションは月に550時間までの稼働時間が割り当てられる
アカウントにクレジットカードを紐付けると1000時間に増える
公開しているアプリケーションに、30分間アクセスがないと、スリープモードに移行する
無料プランでも、アプリケーションをいくつも登録・起動できます。ただし、アカウント毎に稼働時間が設定されており、アプリケーションの起動時間がそれを超えると月末まで一切起動しなくなります。

また、無料プランで最初にもらえるのは月550時間分ですが、クレジットカードを登録すると、月1000時間に増えます。自動的に課金されることはありませんが、有料のアドオンなどを使用すると課金されるようになります。ご注意ください。

30分間アクセスが無く、スリープモードに移行すると、次にアクセスされたときに再度アプリケーションを起動しなおす必要があるので、起動に時間がかかるようになります。

例を用いて解説します。月550時間の場合、Herokuに3つのアプリケーションを常に起動しているとして、 3 x 24 = 72 時間が毎日消費されます。また常にアクセスがあり、スリープモードに移行しないとすると、550 ÷ 72 = 7.6 日で稼働時間を消費しきってしまい、アプリケーション3つともが起動しなくなります。そして次の月に稼働時間がリセットされ、起動するようになります。

有料プランは制限無し
有料プランであれば、機能制限は無く、常にアプリケーションを稼働させることができます。また、スリープモードもありません。

本格的にオリジナルサービスを導入するときは、課金したほうが良いでしょう。

Lesson 13Chapter 17.3
Herokuのアカウント登録
 すでにHerokuアカウントを持っている場合はアカウント登録をする必要はありません。
Herokuトップページ
Herokuトップページ

Herokuを利用するためにアカウント登録を行います。
Herokuのトップページにアクセスしてアカウント登録をしてください。
Heroku

トップページから新規アカウント登録ページに遷移します。
アカウント登録ページへ
アカウント登録ページへ

First nameに名前、Last nameに苗字をアルファベットで入力します。Company nameは空欄で構いません。また「Pick your primary development language」と表示されている場合は、「Java」を選んでください。

Heroku新規アカウント登録ページ
Heroku新規アカウント登録ページ

登録を行うと、登録したメールアドレスに確認用のメールが届きます。
メールに記載されているリンクを踏んで認証を行います。
認証が完了すると次はパスワード設定画面へ遷移します。

パスワード設定画面
パスワード設定画面

パスワード設定後、ダッシュボード画面に遷移します。
以上で、Herokuのアカウント作成は完了です。

Lesson 13Chapter 17.4
Heroku CLIツールのインストール
インストーラのダウンロード
HerokuにWebアプリケーションをデプロイするには、Herokuのコマンドラインツールをインストールする必要があります。Heroku CLIツールのダウンロードページへ行き、自分のPC環境に合ったものを選択してダウンロードしてください。

heroku_download

Mac版のインストール
ダウンロードしたファイルをダブルクリックしてインストーラを起動します。最初の画面は説明のみですので「続ける」をクリックします。

heroku_mac_01

次に、インストールするディスクを聞かれるので、PCのHDDを選択して「続ける」をクリックしてください。

heroku_mac_02

インストール前の確認画面が表示されます。とくに問題なければ「インストール」ボタンをクリックします。パスワードを求められたら、PCに設定したパスワードを入力してください。

heroku_mac_03

インストールが完了したら「閉じる」をクリックしてインストール画面を終了してください。

heroku_mac_04

このツールへのPATHはインストール時に自動で登録されますので、ターミナルから heroku コマンドが使えるようになります。

Windows版のインストール
ダウンロードしたファイルをダブルクリックしてインストーラを起動します。途中、Herokuのインストーラが自動でインストールや設定を行う項目の選択について聞かれますが、すべてにチェックを入れた状態で「Next」をクリックしてください。

heroku_windows_01

あとはこのままインストールを進めてください。「Set PATH to Heroku CLI」にチェックを入れることでインストーラが自動でPATHを通してくれるので、インストールが済みしだい、コマンドプロンプトから heroku コマンドが使えるようになります。

Lesson 13Chapter 17.5
デプロイツールをインストール
$ heroku plugins:install heroku-cli-deploy
Lesson 13Chapter 17.6
デプロイ完了までの流れ
これから、作成したメッセージボードをHerokuに、デプロイします。

メッセージボードのプロジェクトフォルダへ移動
まずは、ターミナル（コマンドプロンプト）を開き、現在のローカルのMySQLについて、 message_board データベースのバックアップを取ります。

$ mysqldump -u root -p message_board > message_board_dump.sql
Enter password: ********（rootユーザのパスワードを入力）
これにより、プロジェクトのルートディレクトリに message_board_dump.sql が作成されます。あとで使うので、そのままにしておいてください。

Herokuへログイン
Herokuにログインしましょう。まずは、ターミナル上で、Herokuにログインします。

$ heroku login -i

Enter your Heroku credentials.
Email: Herokuに登録したメールアドレスを入力
Password: Herokuに登録したパスワードを入力
Herokuにログイン成功すると以下のメッセージが表示されます。

Logged in as Herokuに登録したメールアドレス
Heroku上に自分のアプリケーション用の領域を名前をつけて確保する
次に、以下のコマンドを実行してください。

$ heroku create servlet-message-board-(任意の文字列)
Herokuでは他のユーザがすでに登録している領域の名前と同じものを登録できません。そのため、servlet-message-board の後ろに -(任意の文字列)（括弧は不要）の接尾語をつけてコマンドを実行してください。

 Herokuに登録できる名前は小文字、数字、ダッシュ（-）しか文字として使用できませんので注意しましょう。
 ここから先の内容は、servlet-message-board となっている部分をすべて、ここで登録したアプリ名に読み替えた上でカリキュラムを進めてください。
サーバインスタンスのタイムゾーンを設定
Herokuサーバ（Dyno）のインスタンスの日付時刻は、グリニッジ標準時に設定されています。その影響で日付時刻の表示は日本時間と9時間のズレが生じてしまうため、タイムゾーンの設定を追加して日本時間に合わせます。

heroku config:add TZ=Asia/Tokyo --app servlet-message-board
上記コマンドを実行することにより、タイムゾーンが日本に設定されます。設定が反映されているかを確認するには、

heroku run date --app servlet-message-board
こちらのコマンドを実行してください。表示される日付時刻が現在日付時刻であること、ならびにタイムゾーンが JST となっているのを確認できればOKです。

HerokuでMySQL（clearDB）を設定する
Herokuにクレジットカード情報と氏名、住所を登録します。https://heroku.com/verify

15

それができたら、以下のコマンドを実行してください。

$ heroku addons:create cleardb:ignite --app servlet-message-board

Creating cleardb:ignite on ⬢ servlet-message-board... free
Created cleardb-convex-78506 as CLEARDB_DATABASE_URL
Use heroku addons:docs cleardb to view documentation
データベースのURLを確認します。PCに合わせて、以下のどちらかのコマンドを実行しましょう。

（Macユーザの方向け）

$ heroku config --app servlet-message-board | grep CLEARDB_DATABASE_URL
（Windowsユーザの方向け）

> heroku config --app servlet-message-board | findstr CLEARDB_DATABASE_URL
このコマンドを実行すると、下記のような内容が表示されます。

CLEARDB_DATABASE_URL: mysql://b9fb0e486d7d2d:3f0d7c23@us-cdbr-iron-east-05.cleardb.net/heroku_e35ab00f395b58e?reconnect=true
表示されたURLの構造は mysql://(ユーザ名):(パスワード)@(ドメイン)/(データベース名)?reconnect=true となっています。上記の例では、ユーザ名などが以下のとおりに設定されています。

ユーザ名：b9fb0e486d7d2d
パスワード：3f0d7c23
ドメイン：us-cdbr-iron-east-05.cleardb.net
データベース名：heroku_e35ab00f395b58e
これらの設定は環境によって異なりますので、以下 (ユーザ名) などの部分を自身の環境に合わせて読み替えてください。

この情報をもとに、まずターミナル（コマンドプロンプト）から以下のように入力してパスワードを入力すれば自分のPCからHerokuのMySQLにログインできます。

$ mysql -h (ドメイン) -u (ユーザ名) -p

Enter password: (パスワード：画面には表示されない)

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 42763944
Server version: 5.6.36-log MySQL Community Server (GPL)

Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql>
ここで exit を実行していったんMySQLからログアウトしてください（以下のコマンドを実行するためです）。

Herokuに作成したMySQLデータベースは latin1 という文字コードで設定されているため、そのまま利用するとアプリケーション上で文字化けを発生する可能性があります。そこで、下記のコマンドを実行して「UTF-8 の文字コードでMySQLを利用する」設定をHerokuに追加します。

（Macユーザの方向け）

$ heroku config:add CLEARDB_DATABASE_URL='mysql://(ユーザ名):(パスワード)@(ドメイン)/(データベース名)?reconnect=true&useSSL=false&useUnicode=true&characterEncoding=utf8&characterSetResults=utf8'
（Windowsユーザの方向け）

 下記のコマンドで ^^^& としているのは、& を文字情報としてHerokuに送るための処理（エスケープ）です。
Windowsの場合、このようにしないとコマンドが正常に実行できません。
また、クォーテーションは必ずダブルクォーテーションを使ってください。
> heroku config:add CLEARDB_DATABASE_URL="mysql://(ユーザ名):(パスワード)@(ドメイン)/(データベース名)?reconnect=true^^^&useSSL=false^^^&useUnicode=true^^^&characterEncoding=utf8^^^&characterSetResults=utf8" --app servlet-message-board
&useUnicode=true 以降の部分が文字化け対策を設定している部分です。（なお、文字コードとは無関係ですが、追加で &useSSL=false を入れています。エラーの発生を防止するためです。）

上記 heroku config:add のコマンドを実行したら、設定が正しく反映されているか、先述の heroku config --app servlet-message-board のコマンドを実行して CLEARDB_DATABASE_URL の確認をしてください。

 この設定を間違ってしまうとMySQLに接続ができなくなりますので、1文字ずつ細かく確認しましょう。
persistence.xmlの設定
persistance.xmlにHerokuのMySQLのURLを設定します。さきほどの CLEARDB_DATABASE_URL の設定値を基に、persistence.xmlの接続情報タブの内容を変更してください。

URL：下記のURL

jdbc:mysql://(ドメイン)/(データベース名)?reconnect=true&useSSL=false&useUnicode=true&characterEncoding=utf8&characterSetResults=utf8
ユーザー：(ユーザ名)
パスワード：(パスワード)
最後にスキーマ生成タブで database action と script generation を両方とも「なし」に設定します。

HerokuのMySQLにmessagesテーブルを作成する
ターミナルでMySQLにログインしなおした上で、message_board_dump.sql を実行します。（このsqlファイルの絶対パスを控えておいてください。）

mysql> use (データベース名);

Database changed

mysql> source (sqlファイルまでのパス)/message_board_dump.sql
この状態で保存し、ローカルのtomcat8を再起動すると、HerokuのMySQLと今まで作ってきたメッセージボードがつながっています。この状態でメッセージを1件新規登録できたらデプロイ可能です！

プロジェクトのwarファイルを作る
最初に message_board を右クリック→Maven→プロジェクトの更新をしてください。デフォルト設定のまま「OK」で構いません。
次に message_board を右クリック→エクスポート→WARファイルを選択します。
場所はホームディレクトリ直下を指定し、他はそのままで「完了」をクリックしてください。

このファイルをHerokuにデプロイします。

WARファイルをHerokuにデプロイ
 先に Lesson7 データベース(DB) でMySQLをインストールしたとき のような操作で、以下の場所をパス(Path)に通してください。
Macの場合：
/Applications/Eclipse_4.6.3.app/Contents/java/8/Home/bin
Windowsの場合（PleiadesのフォルダをCドライブ直下に格納した場合）：
C:/pleiades/java/8/bin
また、JAVA_HOMEという環境変数を追加します。値は以下のとおりです。
Macの場合：
/Applications/Eclipse_4.6.3.app/Contents/java/8/Home
Windowsの場合（PleiadesのフォルダをCドライブ直下に格納した場合）：
C:/pleiades/java/8
なお、Pathの変更およびJAVA_HOMEの追加に関して、Windowsの場合は環境変数の編集ウィンドウを使います。
Macの場合は、.bash_profileへの追記・修正となります。以下の2行を追記・修正してください。
export PATH=$PATH:/usr/local/mysql/bin:/Applications/Eclipse_4.6.3.app/Contents/java/8/Home/bin
export JAVA_HOME=/Applications/Eclipse_4.6.3.app/Contents/java/8/Home/
下記のコマンドを実行して、WARファイルをHerokuにデプロイしましょう。

（Macユーザの方向け）

$ HEROKU_DEBUG=1 heroku war:deploy ~/message_board.war --app servlet-message-board --webapp-runner 8.0.50.0
（Windowsユーザの方向け）

> set HEROKU_DEBUG=1
> heroku war:deploy %HOMEPATH%/message_board.war --app servlet-message-board --webapp-runner 8.0.50.0
以下のような内容が表示されながら、デプロイが進行します。

Uploading message_board.war
java -Dheroku.appName=servlet-message-board -Xmx1g -Dheroku.webappRunnerVersion=8.0.50.0 -Dheroku.warFile=/Users/taro/message_board.war -jar /Users/taro/.local/share/heroku/plugins/node_modules/heroku-cli-deploy/lib/heroku-deploy-complete.jar
-----> Packaging application...
       - app: servlet-message-board
       - including: webapp-runner.jar
       - including: message_board.war
Procfile:
===================
web: java $JAVA_OPTS -jar webapp-runner.jar ${WEBAPP_RUNNER_OPTS} --port $PORT ./message_board.war

===================
Heroku existing config variables: [DATABASE_URL]
-----> Creating build...
       - file: slug.tgz
       - size: 18MB
Heroku Blob URL: https://s3-external-1.amazonaws.com/heroku-sources-production/057b7b0d-0c5c-4ebc-a200-d43feb943957?AWSAccessKeyId=AKIAJURUZ6XB34ESX54A&Signature=YbFxZylPM%2Fmcc29Nzn0tjmJuHaw%3D&Expires=1520151070
-----> Uploading build...
       - success
-----> Deploying...
remote:
remote: -----> heroku-deploy app detected
remote: -----> Installing JDK 1.8... done
remote: -----> Discovering process types
remote:        Procfile declares types -> web
remote:
remote: -----> Compressing...
remote:        Done: 68.4M
remote: -----> Launching...
remote:        Released v6
remote:        https://servlet-message-board.herokuapp.com/ deployed to Heroku
remote:
-----> Done
https://(herokuのアプリケーションID).herokuapp.com/index にアクセスし、ページが表示されればOKです！色々とメッセージを登録してみましょう！

エラーが出た場合は、画面に表示されるエラー内容を調べて修正し、再度デプロイしてください。

（補足）IDがauto_incrementで10ずつ増えている点について
不具合と感じるかもしれませんが、HerokuのMySQLの仕様で、そのようになってしまうのです。そのまま我慢するか、IDの表示を加工する（もしくは表示しない）ことを検討した方が良いでしょう。

ポイントの確認
ここまでの内容がどんな内容だったか、改めて振り返っておきましょう。
一度に網羅する必要はありません。まずは下記の項目を理解できていれば大丈夫です。

・Herokuとは内容を確認する
・デプロイとは内容を確認する
お疲れ様でした！このレッスンはここまでです。
レッスン13 メッセージボードの構築を終えました

今の気持ちをシェア
学習報告を行うと、学習効果が大幅UPする傾向があります！学習報告の効果、やり方について詳しくはこちら
文字サイズ

キーワード
14チャプターを完了しました！

完了したチャプター
14/17
目次 - Lesson13
1. 学習の目標
2. 準備：eclipseからGit Bash／ターミナルを呼び出す
3. eclipseプロジェクトの作成
3.1 動的Webプロジェクトの作成
3.2 Gitの初期設定を行う
3.3 Mavenプロジェクトへ変換
3.4 必要な外部ライブラリのインストール
4. 最初のサーブレットを作ってTomcatの動作を確認する
4.1 サーブレットの作成
4.2 アプリケーションサーバ（Tomcat8）の設定と起動
5. MySQLとHibernateのセットアップ
5.1 MySQLに新しいデータベースを作成する
5.2 Hibernateのセットアップ
5.3 モデル（DTO）の作成
5.4 DAO（DBUtil）の作成
6. index（一覧表示） の作成
7. EncodingFilterを追加する
8. new（新規登録） の作成
9. indexとnew のビューの作成
9.1 レイアウトファイルの作成
9.2 indexのビューを作成
9.3 newのビューを作成
10. create（挿入処理）の作成
11. show（詳細画面）の作成
12. edit（編集画面）の作成
13. update（更新処理）の作成
14. destroy（削除処理）の作成
15. より良いアプリケーションにするTips
15.1 データが無かった場合に表示内容を変える
15.2 画面の装飾
15.3 フラッシュメッセージを出す
